{"version":3,"sources":["cioGraphs/BarGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["BarGraph","props","state","data","labels","datasets","label","fill","backgroundColor","hoverBackgroundColor","hoverBorderWidth","hoverBorderColor","type","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointRadius","pointHitRadius","Object","assign","this","cases","active","recoveries","deaths","dates","setState","options","maintainAspectRatio","tooltips","mode","scales","legend","fontColor","xAxes","ticks","gridLines","zeroLineColor","stacked","yAxes","startAtZero","min","stepSize","title","display","fontSize","text","StateName","titleFontSize","bodyFontSize","xPadding","Component","axios","require","App","loading","getData","localStorage","getItem","getSessionData","fetchAndSaveResponse","a","all","get","then","spread","responseOne","responseTwo","responseThree","responseFour","data1","body","data2","data3","data4","l1","length","l2","console","log","i","District","push","TotalCase","date","ActiveCases","Recoveries","Deaths","L","temp","parseInt","toString","setItem","JSON","stringify","catch","error","parse","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c54ee2b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n//import 'chartjs-plugin-datalabels';\r\n\r\nclass BarGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            data: {\r\n                labels: ['cg','ccdd','cccc'],\r\n                datasets:[\r\n               \r\n                  {\r\n                    label:'Deaths',\r\n                    fill: false,\r\n                    //type: 'bar',\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#b74b60\",\r\n\t\t\t\t\thoverBackgroundColor: \"#b74b60\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  {\r\n                    label:'Recovered',\r\n                    fill: false,\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#3c7c76\",\r\n\t\t\t\t\thoverBackgroundColor: \"#3c7c76\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  {\r\n                    label:'Active',\r\n                    fill: false,\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#571B59\",\r\n\t\t\t\t\thoverBackgroundColor: \"#571B59\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  { \r\n                    label: 'Total',\r\n                    type:'line',\r\n                    //\r\n                    data: [560000, 660000, 600000, 460000, 600000, 360000, 600000,600000, 360000, 600000],\r\n                    fill: false,\r\n                    borderColor: '#EC932F',\r\n                    backgroundColor: '#EC932F',\r\n                    pointBorderColor: '#EC932F',\r\n                    pointBackgroundColor: '#EC932F',\r\n                    pointHoverBackgroundColor: '#EC932F',\r\n                    pointHoverBorderColor: '#EC932F',\r\n                    pointRadius: 6,\r\n                    pointHitRadius: 6,\r\n                    //yAxisID: 'y-axis-2'\r\n                  }\r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let data = Object.assign({},this.state.data)\r\n\r\n        let cases = [...this.props.cases]\r\n         let active = [...this.props.active]\r\n         let recoveries = [...this.props.recoveries]\r\n         let deaths = [...this.props.deaths]\r\n         let dates = [...this.props.dates]\r\n\r\n        data.datasets[3].data = [...cases]\r\n        data.datasets[2].data = [...active]\r\n        data.datasets[1].data = [...recoveries]\r\n        data.datasets[0].data = [...deaths]\r\n        data.labels = [...dates]\r\n        \r\n        this.setState({\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Bar\r\n                    data={this.state.data}\r\n                    options={{ \r\n                        //responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        tooltips: {\r\n                            mode: 'label'\r\n                          },\r\n                        scales: {\r\n                            legend: {\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                }\r\n                            },\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: \"#ddd\",                      \r\n                                },\r\n                                gridLines: {\r\n                                    zeroLineColor: 'rgba(255, 255, 255, 1)'\r\n                                },\r\n                                stacked: true\r\n                            }],\r\n                            yAxes: [                                  \r\n                                    {\r\n                                    ticks: {\r\n                                        fontColor: \"#ddd\",\r\n                                        startAtZero: true,\r\n                                        min: 0,\r\n                                        stepSize: 100000\r\n                                    },\r\n                                    gridLines: {\r\n                                        zeroLineColor: 'rgba(255, 255, 255, 1)'\r\n                                    },\r\n                                    stacked: true\r\n                                }],   \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            fontSize: 15,\r\n                            fontColor: \"#ddd\",\r\n                            text: `${this.props.StateName} - Last 10 Days Trend Of Covid-19 Cases`\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 12,\r\n                            bodyFontSize: 12,\r\n                            xPadding: 20,\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default BarGraph;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./cioGraphs/ChartJS.css\";\nimport BarGraph from \"./cioGraphs/BarGraph\";\n\n//import CasesGraph from './cioGraphs/casesGraph';\n//import ActiveGraph from './cioGraphs/activeGraph';\n//import RecoveriesGraph from './cioGraphs/recoveriesGraph';\n//import DeathsGraph from './cioGraphs/deathsGraph';\n\nconst axios = require(\"axios\");\n\nclass App extends Component {\n  \n  state = {\n    loading: true,\n    data : {\n      StateName: \"Maharashtra\",\n      cases: [],\n      active: [],\n      recoveries: [],\n      deaths: [],\n      dates: []\n    }\n  }\n  \n  componentDidMount() {\n    this.getData();\n  }\n\n  getData =  () => {\n      \n    //localStorage.setItem(\"CovidData\", JSON.stringify([]))\n    let cachedData = localStorage.getItem(\"CovidData\")\n    \n    if(cachedData === null) {\n       this.fetchAndSaveResponse();\n        \n     }\n    else {\n      this.getSessionData();\n      this.fetchAndSaveResponse();\n      //this.getSessionData();\n    }\n  }\n\n  fetchAndSaveResponse = async () => {\n    try {\n      await axios.all([\n        axios.get(\"https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api\")\n      ]).then(axios.spread((...responses) => {\n        var responseOne = responses[0]\n        var responseTwo = responses[1]\n        var responseThree = responses[2]\n        var responseFour = responses[3]\n\n        // console.log(responseOne.data.body)\n        // console.log(responseTwo.data.body)\n        // console.log(responseThree.data.body)\n        // console.log(responseFour.data.body)\n\n        let data1 = responseOne.data.body;\n        let data2 = responseTwo.data.body;\n        let data3 = responseThree.data.body;\n        let data4 = responseFour.data.body;\n\n\n    let cases = []\n    let active = []\n    let recoveries = []\n    let deaths = []\n    let dates = []\n\n    //let temp = []\n    let l1 = data1.length;\n    let l2 = data2.length;\n\n    console.log(l1,l2,this.state.data.StateName)\n\n    \n      for (let i=0; i<l1; i++) {\n        if(data1[i].District === this.state.data.StateName) {\n            cases.push(data1[i].TotalCase);\n            dates.push(data1[i].date);\n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data2[i].District === this.state.data.StateName) {\n            active.push(data2[i].ActiveCases);\n            \n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data3[i].District === this.state.data.StateName) {\n            recoveries.push(data3[i].Recoveries);\n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data4[i].District === this.state.data.StateName) {\n            deaths.push(data4[i].Deaths);\n        }\n      }\n\n      const L = active.length;\n      let temp = 0\n      console.log(cases)\n      cases = []\n\n      for (let i=0; i<L; i++) {\n        temp = parseInt(active[i]) + parseInt(recoveries[i]) + parseInt(deaths[i])\n        cases.push(temp.toString())\n        console.log(cases[i])\n    }\n      // For Loop Calculation For total cases \n        /*\n               for (let i=0; i<L; i++) {\n             console.log(parseInt(active[i]) + parseInt(recoveries[i]) + parseInt(deaths[i]))\n         }\n\n\n        */\n\n\n      //,active,recoveries,deaths)\n\n        localStorage.setItem(\"CovidData\", JSON.stringify([[...cases],[...active],[...recoveries],[...deaths],[...dates]]));\n\n        this.getSessionData();\n\n\n\n        this.setState({\n          loading: false,\n          data: {\n            StateName: \"Maharashtra\",\n            cases,\n            active,\n            recoveries,\n            deaths,\n            dates \n          }\n        })\n        console.log(this.state)\n        })).catch(error => {\n          // react on errors\n          console.error(error);\n        })     \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n  getSessionData = () => {\n    let data = JSON.parse(localStorage.getItem(\"CovidData\"))\n\n    console.log(data[0])\n    \n    this.setState({\n      loading: false,\n      data: {\n        StateName: \"Maharashtra\",\n        cases: data[0],\n        active: data[1],\n        recoveries: data[2],\n        deaths: data[3],\n        dates: data[4]\n      }\n    })\n    //console.log(this.state)\n    // console.log(cases)\n    // console.log(active)\n    // console.log(recoveries)\n    // console.log(deaths)\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        { this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : <BarGraph \n          cases={this.state.data.cases} \n          active={this.state.data.active} \n          recoveries={this.state.data.recoveries} \n          deaths={this.state.data.deaths} \n          dates={this.state.data.dates} \n          StateName={this.state.data.StateName}\n        /> }\n        {/* {this.state.loading ?  null : <RecoveriesGraph recoveries={this.state.data.recoveries} dates={this.state.data.dates} StateName={this.state.data.StateName}/> }\n        {this.state.loading ?  null : <DeathsGraph deaths={this.state.data.deaths} dates={this.state.data.dates} StateName={this.state.data.StateName}/> } */}\n        {/* {this.state.loading ?  null : <CasesGraph cases={this.state.data.cases} dates={this.state.data.dates} StateName={this.state.data.StateName}/> } */}\n      </div>\n  );\n  }\n}\n\nexport default App;\n\n\n//axios.get(\"https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api\") TOTAL\n//axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\") ACTIVE\n//axios.get(\"https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api\") RECOVERED\n//axios.get(\"https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api\") DEATHS","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}