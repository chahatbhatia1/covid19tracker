{"version":3,"sources":["cioTiles/ChartJS.jsx","App.js","serviceWorker.js","index.js"],"names":["ChartJS","props","state","data","labels","datasets","label","fill","backgroundColor","borderColor","pointRadius","pointHitRadius","pointHoverRadius","lineTension","Object","assign","this","active","dates","setState","options","scales","legend","fontColor","xAxes","ticks","yAxes","title","display","text","tooltips","titleFontSize","bodyFontSize","xPadding","Component","axios","require","App","loading","getData","a","get","response","body","console","log","includes","l","length","i","District","push","ActiveCases","date","error","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yQAgHeA,E,kDAzGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,CACFC,OAAQ,CAAC,cAAe,aAAc,QAAS,YAAa,iBAAkB,WAC9EC,SAAS,CAAC,aAENC,MAAM,eACNC,MAAM,EACNC,gBAAiB,uBACjBC,YAAa,qBACbC,YAAa,EACbC,eAAgB,EAChBC,iBAAkB,EAClBC,YAAa,GAEbV,KAAK,CACD,KACA,MACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,OArBC,kBAuBY,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,eAtCD,E,gEA+Cf,IAAIA,EAAOW,OAAOC,OAAO,GAAGC,KAAKd,MAAMC,MACnCc,EAAM,YAAOD,KAAKf,MAAMgB,QACxBC,EAAK,YAAOF,KAAKf,MAAMiB,OAC3Bf,EAAKE,SAAS,GAAGF,KAAjB,YAA4Bc,GAC5Bd,EAAKC,OAAL,YAAkBc,GAElBF,KAAKG,SAAS,CACVhB,W,+BAKJ,OACI,oCACI,kBAAC,IAAD,CACIA,KAAMa,KAAKd,MAAMC,KAGjBiB,QAAS,CACLC,OAAQ,CACJC,OAAQ,CACJlB,OAAQ,CACJmB,UAAW,UAInBC,MAAO,CAAC,CACJC,MAAO,CAEHF,UAAW,UAGnBG,MAAO,CAAC,CACJD,MAAO,CAEHF,UAAW,WAKvBI,MAAO,CACHC,SAAS,EAETL,UAAW,OACXM,KAAM,gCAEVC,SAAU,CACNC,cAAe,GACfC,aAAc,GACdC,SAAU,Y,GAjGhBC,aCDhBC,EAAQC,EAAQ,KA0EPC,E,4MAtEbnC,MAAQ,CACNoC,SAAS,EACTnC,KAAO,CACLc,OAAQ,GAGRC,MAAO,K,EAQXqB,Q,sBAAU,sCAAAC,EAAA,+EAEiBL,EAAMM,IAAI,oEAF3B,OAWN,IATMC,EAFA,OAGFvC,EAAOuC,EAASvC,KAAKwC,KACzBC,QAAQC,IAAI1C,EAAK,GAAGD,MAAM4C,SAAS,WAC7B7B,EAAS,GACTC,EAAQ,GAEH,GACP6B,EAAI5C,EAAK6C,OAEJC,EAAE,EAAGA,EAAEF,EAAGE,IACM,eAApB9C,EAAK8C,GAAGC,WACPjC,EAAOkC,KAAKhD,EAAK8C,GAAGG,aACpBlC,EAAMiC,KAAKhD,EAAK8C,GAAGI,OAazB,EAAKlC,SAAS,CACZmB,SAAS,EACTnC,KAAM,CACJc,SAGAC,WAGJ0B,QAAQC,IAAI5B,GACZ2B,QAAQC,IAAI3B,GArCN,kDAyCN0B,QAAQU,MAAR,MAzCM,0D,kEAHRtC,KAAKuB,Y,+BAiDL,OACE,yBAAKgB,UAAU,aACZvC,KAAKd,MAAMoC,QAAW,wBAAIiB,UAAU,UAAd,cAAyC,kBAAC,EAAD,CAAStC,OAAQD,KAAKd,MAAMC,KAAKc,OAAQC,MAAOF,KAAKd,MAAMC,KAAKe,a,GAhEtHgB,aCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLV,QAAQU,MAAMA,EAAMkB,a","file":"static/js/main.61c6b6e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import \"./ChartJS.css\";\r\n\r\nimport { Bar, Line } from 'react-chartjs-2';\r\n\r\n\r\nclass ChartJS extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            data: {\r\n                labels: ['Maharashtra', 'Tamil Nadu', 'Delhi', 'Karnataka', 'Andhra Pradesh', 'Gujarat'],\r\n                datasets:[\r\n                  {\r\n                    label:'Active Cases',\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    borderColor: 'rgba(75,192,192,1)',\r\n                    pointRadius: 5,\r\n                    pointHitRadius: 5,\r\n                    pointHoverRadius: 5,\r\n                    lineTension: 0.1,\r\n\r\n                    data:[\r\n                        24000,\r\n                        34563,\r\n                        52000,\r\n                        40132,\r\n                        26433,\r\n                        12000,\r\n                        52000,\r\n                        40132,\r\n                        26433,\r\n                        12000\r\n                    ],\r\n                    backgroundColor: [\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5',\r\n                        '#1371A5'\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let data = Object.assign({},this.state.data)\r\n        let active = [...this.props.active]\r\n        let dates = [...this.props.dates]\r\n        data.datasets[0].data = [...active]\r\n        data.labels = [...dates]\r\n        //console.log(data)\r\n        this.setState({\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Line\r\n                    data={this.state.data}\r\n                    // width={100}\r\n                    // height={50}\r\n                    options={{ \r\n                        scales: {\r\n                            legend: {\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                    //fontSize: 18\r\n                                }\r\n                            },\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                        \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            //fontSize: 25,\r\n                            fontColor: \"#ddd\",\r\n                            text: 'Active Cases In Last 10 Days'\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 15,\r\n                            bodyFontSize: 15,\r\n                            xPadding: 20,\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ChartJS;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChartJS from './cioTiles/ChartJS';\n//import ChartJS2 from './cioTiles/ChartJS_2';\n//import ChartJS3 from './cioTiles/ChartJS_3';\nconst axios = require(\"axios\");\n\nclass App extends Component {\n  \n  state = {\n    loading: true,\n    data : {\n      active: [],\n      //recoveries: [],\n      //deaths: []\n      dates: []\n    }\n  }\n  \n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async () => {\n    try {\n      const response = await axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\");\n      let data = response.data.body;\n      console.log(data[0].state.includes(\"Andhra\"));\n      const active = []\n      const dates = []\n\n      let temp = []\n      let l = data.length;\n\n      for (let i=0; i<l; i++) {\n        if(data[i].District == \"Maharashtra\") {\n            active.push(data[i].ActiveCases);\n            dates.push(data[i].date);\n        }\n      }\n    \n      // console.log(temp);\n\n      // const recoveries = []\n      // const deaths = []\n      \n      //active.push(data[19].active_Cases,data[29].active_Cases,data[7].active_Cases,data[14].active_Cases,data[0].active_Cases,data[9].active_Cases)\n      //recoveries.push(data[19].recoveries,data[29].recoveries,data[7].recoveries,data[14].recoveries,data[0].recoveries,data[9].recoveries)\n      //deaths.push(data[19].deaths,data[29].deaths,data[7].deaths,data[14].deaths,data[0].deaths,data[9].deaths)\n      \n      this.setState({\n        loading: false,\n        data: {\n          active,\n          //recoveries,\n          //deaths\n          dates\n        }\n    })\n      console.log(active)\n      console.log(dates)\n      // console.log(recoveries)\n      // console.log(deaths)\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        {this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : <ChartJS active={this.state.data.active} dates={this.state.data.dates}/>}\n        {/*   {this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : <ChartJS2 recoveries={this.state.data.recoveries}/>}\n        {this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : <ChartJS3 deaths={this.state.data.deaths}/>} */}\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}