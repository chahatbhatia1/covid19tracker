{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","this","interval","setInterval","fetch","headers","then","response","json","console","log","setState","catch","err","className","map","todo","id","country","cases","recovered","deaths","active","src","class","allowFullScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oPAgFeA,G,kNA1EbC,MAAQ,CACNC,MAAQ,I,kEAGW,IAAD,OAClBC,KAAKC,SAAWC,YAAYC,MAAM,qDAAqD,CACrFC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAIbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACZX,MAAQO,OAGXK,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,MACX,O,+BAGH,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,2BAEb,wBAAIA,UAAU,uBAAd,iDACCb,KAAKF,MAAMC,MAAMe,KAAI,SAACC,GAAD,OACtB,yBAAKF,UAAU,kBAAkBG,GAAID,EAAKE,SACxC,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,cAAcE,EAAKE,SACjC,wBAAIJ,UAAU,iCAEZ,+CACiBE,EAAKG,OAEtB,6BACA,6CACeH,EAAKI,WAEpB,6BACA,0CACYJ,EAAKK,QAEjB,6BACA,gDACkBL,EAAKM,eAO/B,yBAAKR,UAAU,iCACX,sDACA,2ZASZ,4BAAQS,IAAI,6CAA8CC,MAAM,cAAcC,iBAAe,IAC7F,uBAAGX,UAAU,QAAb,2D,GArEkBY,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.f25e62c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  \n  state = {\n    todos : [],\n  }\n  \n  componentDidMount() {\n    this.interval = setInterval(fetch(\"https://coronavirus-19-api.herokuapp.com/countries\",{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n\n    })\n    .then(response => response.json())\n    .then(response => {\n      console.log(response);\n      this.setState({\n        todos : response\n      })\n    })\n    .catch(err => {\n      console.log(err);\n    }),60000);\n }\n  render(){\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"col-xs-12 col-lg-6 left\">\n\n          <h2 className=\"text-center h1 mt-5\">Novel Corona (COVID-19) Tracker (Countrywise)</h2>\n          {this.state.todos.map((todo) => (\n          <div className=\"card mt-4 card1\" id={todo.country}>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{todo.country}</h5>\n              <h6 className=\"card-subtitle mb-2 text-muted\">\n               \n                <span>\n                  Total Cases : {todo.cases}\n                </span>\n                <br />               \n                <span>\n                  Recovered : {todo.recovered}\n                </span>\n                <br />\n                <span>\n                  Deaths : {todo.deaths}\n                </span>\n                <br />\n                <span>\n                  Active Cases : {todo.active}\n                </span>                       \n              </h6>\n            </div>\n          </div>\n          ))}\n        </div>\n        <div className=\"col-xs-12 col-lg-6 right mt-5\">\n            <h2>What is Corona Virus ?</h2>\n            <p>Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing.You can protect yourself by washing your hands frequently, avoiding touching your face, and avoiding close contact (1 meter or 3 feet) with people who are unwell.</p>\n{/* \n<div style={{width:\"100%\" , \n  height:0,\n  paddingBottom:\"100%\",\n  position:relative}}>\n  <iframe src=\"https://giphy.com/embed/YPhuwt9pV2XLM2HIq4\"  style = { position : absolute , frameBorder : 0,width:\"100%\", height:\"100%\"} class=\"giphy-embed\" allowFullScreen></iframe>\n</div> */}\n<iframe src=\"https://giphy.com/embed/YPhuwt9pV2XLM2HIq4\"  class=\"giphy-embed\" allowFullScreen></iframe>\n<p className=\"note\">( Scroll Down to see all the countries affected )</p>\n        </div>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}