{"version":3,"sources":["cioGraphs/activeGraph.jsx","cioGraphs/recoveriesGraph.jsx","cioGraphs/deathsGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["ActiveGraph","props","state","StateName","data","labels","datasets","label","fill","backgroundColor","borderColor","pointRadius","pointHitRadius","pointHoverRadius","lineTension","Object","assign","this","active","dates","setState","options","scales","legend","fontColor","xAxes","ticks","yAxes","title","display","fontSize","text","tooltips","titleFontSize","bodyFontSize","xPadding","Component","axios","require","App","loading","cases","recoveries","deaths","getData","a","sessionStorage","getItem","all","get","then","spread","responseOne","responseTwo","responseThree","responseFour","console","log","body","data1","data2","data3","data4","setItem","JSON","stringify","getSessionData","catch","error","parse","l1","length","l2","i","District","push","TotalCases","date","ActiveCases","Recoveries","Deaths","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fefe6572.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import \"./ChartJS.css\";\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nclass ActiveGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            StateName: \"\",\r\n            data: {\r\n                labels: [],\r\n                datasets:[\r\n                  {\r\n                    label:'Active Cases',\r\n                    fill: false,\r\n                    backgroundColor: '#571B59',\r\n                    borderColor: '#571B59',\r\n                    pointRadius: 5,\r\n                    pointHitRadius: 5,\r\n                    pointHoverRadius: 5,\r\n                    lineTension: 0.1,\r\n                    data:[],\r\n                    backgroundColor: [\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59',\r\n                        '#571B59'\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let data = Object.assign({},this.state.data)\r\n        let active = [...this.props.active]\r\n        let dates = [...this.props.dates]\r\n        data.datasets[0].data = [...active]\r\n        data.labels = [...dates]\r\n        \r\n        this.setState({\r\n            StateName: this.props.StateName,\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Line\r\n                    data={this.state.data}\r\n                    // width={100}\r\n                    // height={50}\r\n                    options={{ \r\n                        scales: {\r\n                            legend: {\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                    //fontSize: 18\r\n                                }\r\n                            },\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                        \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            fontSize: 15,\r\n                            fontColor: \"#ddd\",\r\n                            text: `Active Cases In Last 10 Days - ${this.state.StateName}`\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 15,\r\n                            bodyFontSize: 15,\r\n                            xPadding: 20,\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ActiveGraph;","import React, { Component } from 'react';\r\n// import \"./ChartJS.css\";\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nclass ActiveGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            StateName: \"\",\r\n            data: {\r\n                labels: [],\r\n                datasets:[\r\n                  {\r\n                    label:'Recovered Cases',\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    borderColor: '#3c7c76',\r\n                    pointRadius: 5,\r\n                    pointHitRadius: 5,\r\n                    pointHoverRadius: 5,\r\n                    lineTension: 0.1,\r\n                    data:[],\r\n                    backgroundColor: [\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76',\r\n                        '#3c7c76'\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let data = Object.assign({},this.state.data)\r\n        let active = [...this.props.active]\r\n        let dates = [...this.props.dates]\r\n        data.datasets[0].data = [...active]\r\n        data.labels = [...dates]\r\n        \r\n        this.setState({\r\n            StateName: this.props.StateName,\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Line\r\n                    data={this.state.data}\r\n                    // width={100}\r\n                    // height={50}\r\n                    options={{ \r\n                        scales: {\r\n                            legend: {\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                    //fontSize: 18\r\n                                }\r\n                            },\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                        \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            fontSize: 15,\r\n                            fontColor: \"#ddd\",\r\n                            text: `Recovered Cases In Last 10 Days - ${this.state.StateName}`\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 15,\r\n                            bodyFontSize: 15,\r\n                            xPadding: 20,\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ActiveGraph;","import React, { Component } from 'react';\r\n// import \"./ChartJS.css\";\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nclass ActiveGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            StateName: \"\",\r\n            data: {\r\n                labels: [],\r\n                datasets:[\r\n                  {\r\n                    label:'Death Cases',\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(75,192,192,0.4)',\r\n                    borderColor: '#b74b60',\r\n                    pointRadius: 5,\r\n                    pointHitRadius: 5,\r\n                    pointHoverRadius: 5,\r\n                    lineTension: 0.1,\r\n                    data:[],\r\n                    backgroundColor: [\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60',\r\n                        '#b74b60'\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let data = Object.assign({},this.state.data)\r\n        let active = [...this.props.active]\r\n        let dates = [...this.props.dates]\r\n        data.datasets[0].data = [...active]\r\n        data.labels = [...dates]\r\n        \r\n        this.setState({\r\n            StateName: this.props.StateName,\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Line\r\n                    data={this.state.data}\r\n                    // width={100}\r\n                    // height={50}\r\n                    options={{ \r\n                        scales: {\r\n                            legend: {\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                    //fontSize: 18\r\n                                }\r\n                            },\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    //fontSize: 15,\r\n                                    fontColor: \"#ddd\",\r\n                                }\r\n                            }],\r\n                        \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            fontSize: 15,\r\n                            fontColor: \"#ddd\",\r\n                            text: `Death Cases In Last 10 Days - ${this.state.StateName}`\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 15,\r\n                            bodyFontSize: 15,\r\n                            xPadding: 20,\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ActiveGraph;","import React, { Component } from \"react\";\nimport \"./App.css\";\n//import CasesGraph from './cioGraphs/casesGraph';\nimport ActiveGraph from './cioGraphs/activeGraph';\nimport RecoveriesGraph from './cioGraphs/recoveriesGraph';\nimport DeathsGraph from './cioGraphs/deathsGraph';\n\nconst axios = require(\"axios\");\n\nclass App extends Component {\n  \n  state = {\n    loading: true,\n    data : {\n      StateName: \"Maharashtra\",\n      cases: [],\n      active: [],\n      recoveries: [],\n      deaths: [],\n      dates: []\n    }\n  }\n  \n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async () => {\n      \n    let cachedData = sessionStorage.getItem(\"CovidData\")\n    \n    if(cachedData === null) {\n      try {\n        await axios.all([\n          axios.get(\"https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n          axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n          axios.get(\"https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n          axios.get(\"https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api\")\n        ]).then(axios.spread((...responses) => {\n          var responseOne = responses[0]\n          var responseTwo = responses[1]\n          var responseThree = responses[2]\n          var responseFour = responses[3]\n\n          console.log(responseOne.data.body)\n\n          let data1 = responseOne.data.body;\n          let data2 = responseTwo.data.body;\n          let data3 = responseThree.data.body;\n          let data4 = responseFour.data.body;\n\n          sessionStorage.setItem(\"CovidData\", JSON.stringify([[...data1],[...data2],[...data3],[...data4]]));\n          this.getSessionData();\n\n          })).catch(error => {\n            // react on errors\n            console.error(error);\n          })     \n      } catch (error) {\n        console.error(error);\n      }\n     }\n     else {\n       this.getSessionData();\n     }\n  }\n\n  getSessionData = () => {\n    let data = JSON.parse(sessionStorage.getItem(\"CovidData\"))\n    \n    console.log(data)\n    const cases = []\n    const active = []\n    const recoveries = []\n    const deaths = []\n    const dates = []\n\n    let temp = []\n    let l1 = data[0].length;\n    let l2 = data[1].length;\n\n    console.log(this.state.data.StateName)\n\n    \n      for (let i=0; i<l1; i++) {\n        if(data[0][i].District === this.state.data.StateName) {\n            cases.push(data[0][i].TotalCases);\n            dates.push(data[0][i].date);\n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data[1][i].District === this.state.data.StateName) {\n            active.push(data[1][i].ActiveCases);\n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data[2][i].District === this.state.data.StateName) {\n            recoveries.push(data[2][i].Recoveries);\n        }\n      }\n      for (let i=0; i<l2; i++) {\n        if(data[3][i].District === this.state.data.StateName) {\n            deaths.push(data[3][i].Deaths);\n        }\n      }\n    \n   \n  \n    this.setState({\n      loading: false,\n      data: {\n        StateName: \"Maharashtra\",\n        active,\n        recoveries,\n        deaths,\n        dates\n      }\n    })\n    console.log(cases)\n    console.log(active)\n    console.log(recoveries)\n    console.log(deaths)\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        {this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : <ActiveGraph active={this.state.data.active} dates={this.state.data.dates} StateName={this.state.data.StateName}/> }\n        {this.state.loading ?  null : <RecoveriesGraph active={this.state.data.recoveries} dates={this.state.data.dates} StateName={this.state.data.StateName}/> }\n        {this.state.loading ?  null : <DeathsGraph active={this.state.data.deaths} dates={this.state.data.dates} StateName={this.state.data.StateName}/> }\n      \n        {/* <CasesGraph active={this.state.data.cases} dates={this.state.data.dates} StateName={this.state.data.StateName}/> */}\n        \n      </div>\n  );\n  }\n}\n\nexport default App;\n\n\n//axios.get(\"https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api\") TOTAL\n//axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\") ACTIVE\n//axios.get(\"https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api\") RECOVERED\n//axios.get(\"https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api\") DEATHS","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}