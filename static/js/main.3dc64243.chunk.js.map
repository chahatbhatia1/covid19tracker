{"version":3,"sources":["cioGraphs/BarGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["BarGraph","props","state","stateName","data","labels","datasets","label","type","position","fill","borderColor","backgroundColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointRadius","pointHitRadius","hoverBackgroundColor","hoverBorderWidth","hoverBorderColor","currentState","this","match","params","stateId","states","Object","assign","data1","cases","data2","active","data3","recoveries","data4","deaths","l1","length","l2","dates","i","District","push","TotalCase","date","ActiveCases","Recoveries","Deaths","L","temp","parseInt","toString","console","log","setState","options","maintainAspectRatio","scales","xAxes","ticks","fontColor","gridLines","zeroLineColor","stacked","yAxes","startAtZero","min","stepSize","title","display","fontSize","text","tooltips","titleFontSize","bodyFontSize","xPadding","legend","boxWidth","Component","axios","require","App","loading","fetchAndSaveResponse","a","all","get","then","spread","responses","body","catch","error","className","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3dc64243.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n//import 'chartjs-plugin-datalabels';\r\n\r\n\r\nclass BarGraph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            stateName: \"\",\r\n            data: {\r\n                labels: ['cg','ccdd','cccc'],\r\n                datasets:[\r\n                    { \r\n                        label: 'Total',\r\n                        type:'line',\r\n                        position: 'right',\r\n                        //\r\n                        data: [560000, 660000, 600000, 460000, 600000, 360000, 600000,600000, 360000, 600000],\r\n                        fill: false,\r\n                        borderColor: '#EC932F',\r\n                        backgroundColor: '#EC932F',\r\n                        pointBorderColor: '#EC932F',\r\n                        pointBackgroundColor: '#EC932F',\r\n                        pointHoverBackgroundColor: '#EC932F',\r\n                        pointHoverBorderColor: '#EC932F',\r\n                        pointRadius: 3,\r\n                        pointHitRadius: 6,\r\n                        //yAxisID: 'y-axis-2'\r\n                      },\r\n                  {\r\n                    label:'Deaths',\r\n                    fill: false,\r\n                    type: 'bar',\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#b74b60\",\r\n\t\t\t\t\thoverBackgroundColor: \"#b74b60\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  {\r\n                    label:'Recovered',\r\n                    fill: false,\r\n                    type: 'bar',\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#3c7c76\",\r\n\t\t\t\t\thoverBackgroundColor: \"#3c7c76\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  {\r\n                    label:'Active',\r\n                    fill: false,\r\n                    type: 'bar',\r\n                    data:[10,20,30],\r\n                    backgroundColor: \"#571B59\",\r\n\t\t\t\t\thoverBackgroundColor: \"#571B59\",\r\n\t\t\t\t\thoverBorderWidth: 2,\r\n\t\t\t\t\thoverBorderColor: 'lightgrey'\r\n                  },\r\n                  \r\n                ]\r\n              }\r\n         }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //console.log(this.props)\r\n        let currentState = this.props.match.params.stateId\r\n        //console.log(currentState)\r\n        let states = {\r\n            \"andamanAndNicobarIslands\": \"Andaman & Nicobar Islands\",\r\n            \"maharashtra\": \"Maharashtra\",\r\n            \"rajasthan\": \"Rajasthan\",\r\n            \"delhi\": \"Delhi\",\r\n            \"andhraPradesh\": \"Andhra Pradesh\",  //TODO\r\n            \"arunachalPradesh\": \"Arunachal Pradesh\",\r\n            \"assam\": \"Assam\",\r\n            \"bihar\": \"Bihar\",\r\n            \"chattisgarh\": \"Chattisgarh\",\r\n            \"goa\": \"Goa\",\r\n            \"gujarat\": \"Gujarat\",\r\n            \"haryana\": \"Haryana\",\r\n            \"himachalPradesh\": \"Himachal Pradesh\",\r\n            \"jharkhand\": \"Jharkhand\",\r\n            \"kerala\": \"Kerala\",                 \r\n            \"karnataka\": \"Karnataka\",\r\n            \"madhyaPradesh\": \"Madhya Pradesh\",\r\n            \"manipur\": \"Manipur\",\r\n            \"meghalaya\": \"Meghalaya\",\r\n            \"mizoram\": \"Mizoram\",\r\n            \"nagaland\": \"Nagaland\",\r\n            \"punjab\": \"Punjab\",\r\n            \"odisha\": \"Odisha\",\r\n            \"sikkim\": \"Sikkim\",\r\n            \"tamilNadu\": \"Tamil Nadu\",\r\n            \"telangana\": \"Telangana\",\r\n            \"tripura\": \"Tripura\",\r\n            \"uttarPradesh\": \"Uttar Pradesh\",\r\n            \"uttarakhand\": \"Uttarakhand\",\r\n            \"westBengal\": \"West Bengal\"\r\n        }\r\n        let data = Object.assign({},this.state.data)\r\n\r\n        let data1 = [...this.props.cases]\r\n        let data2 = [...this.props.active]\r\n        let data3 = [...this.props.recoveries]\r\n        let data4 = [...this.props.deaths]\r\n\r\n\r\n        //:TODO handling params logic\r\n\r\n        let l1 = data1.length\r\n        let l2 = data2.length\r\n\r\n        //console.log(l1,l2)\r\n\r\n        let cases = []\r\n        let active = []\r\n        let recoveries = []\r\n        let deaths = []\r\n        let dates = []\r\n\r\n        let stateName = states[currentState]\r\n\r\n          for (let i=0; i<l1; i++) {\r\n            if(data1[i].District === stateName) {\r\n                cases.push(data1[i].TotalCase);\r\n                dates.push(data1[i].date);\r\n            }\r\n          }\r\n\r\n          //console.log(cases)\r\n\r\n          for (let i=0; i<l2; i++) {\r\n            if(data2[i].District === stateName) {\r\n                active.push(data2[i].ActiveCases);\r\n                \r\n            }\r\n          }\r\n          for (let i=0; i<l2; i++) {\r\n            if(data3[i].District === stateName) {\r\n                recoveries.push(data3[i].Recoveries);\r\n            }\r\n          }\r\n          for (let i=0; i<l2; i++) {\r\n            if(data4[i].District === stateName) {\r\n                deaths.push(data4[i].Deaths);\r\n            }\r\n          }\r\n\r\n          const L = active.length;\r\n          let temp = 0\r\n          cases = []\r\n\r\n          for (let i=0; i<L; i++) {\r\n            temp = parseInt(active[i]) + parseInt(recoveries[i]) + parseInt(deaths[i])\r\n            cases.push(temp.toString())\r\n        }\r\n\r\n        console.log(active,recoveries,deaths,cases)\r\n\r\n        data.datasets[0].data = [...cases]\r\n        data.datasets[3].data = [...active]\r\n        data.datasets[2].data = [...recoveries]\r\n        data.datasets[1].data = [...deaths]\r\n        data.labels = [...dates]\r\n        \r\n        this.setState({\r\n            stateName: states[currentState],\r\n            data\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <>\r\n                <Bar\r\n                    data={this.state.data}\r\n                    options={{ \r\n                        //responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        scales: {\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: \"#ddd\",                      \r\n                                },\r\n                                gridLines: {\r\n                                    zeroLineColor: 'rgba(255, 255, 255, 1)'\r\n                                },\r\n                                stacked: true\r\n                            }],\r\n                            yAxes: [                                  \r\n                                    {\r\n                                    ticks: {\r\n                                        fontColor: \"#ddd\",\r\n                                        startAtZero: true,\r\n                                        min: 0,\r\n                                        stepSize: 100000\r\n                                    },\r\n                                    gridLines: {\r\n                                        zeroLineColor: 'rgba(255, 255, 255, 1)'\r\n                                    },\r\n                                    stacked: true\r\n                                }],   \r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            fontSize: 15,\r\n                            fontColor: \"#ddd\",\r\n                            text: `${this.state.stateName} - Last 10 Days Trend Of Covid-19 Cases`\r\n                        },\r\n                        tooltips: {\r\n                            titleFontSize: 12,\r\n                            bodyFontSize: 12,\r\n                            xPadding: 20,\r\n                        },\r\n                         legend : {\r\n                            display: true,\r\n                            position: \"top\",\r\n                            labels: {\r\n                              fontColor: \"#fff\",\r\n                              fontSize: 14,\r\n                              boxWidth: 20\r\n                            }\r\n                        }\r\n                     }}\r\n                />\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default BarGraph;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./cioGraphs/ChartJS.css\";\nimport BarGraph from \"./cioGraphs/BarGraph\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst axios = require(\"axios\");\n\nclass App extends Component {\n  \n  state = {\n    loading: true,\n    data : {\n      //StateName: \"Maharashtra\",\n      cases: [],\n      active: [],\n      recoveries: [],\n      deaths: [],\n      //dates: []\n    }\n  }\n  \n  componentDidMount() {\n    this.fetchAndSaveResponse();\n  }\n\n  fetchAndSaveResponse = async () => {\n    \n    try {\n      await axios.all([\n        axios.get(\"https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api\"),\n        axios.get(\"https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api\")\n      ]).then(axios.spread((...responses) => {\n        var data1 = responses[0].data.body;\n        var data2 = responses[1].data.body;\n        var data3 = responses[2].data.body;\n        var data4 = responses[3].data.body;\n\n        // console.log(responseOne)\n        // console.log(responseTwo)\n        // console.log(responseThree)\n        // console.log(responseFour)\n\n        this.setState({\n          loading: false,\n          data: {\n            //StateName: \"Maharashtra\",\n            cases: data1,\n            active: data2,\n            recoveries: data3,\n            deaths: data4,\n            //dates\n          }\n        })\n      })).catch(error => {\n        // react on errors\n        console.error(error);\n      })     \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render(){\n    return (\n      <Router \n      //basename={window.location.pathname || \" \"}\n      >\n        <div className=\"container\">\n          { this.state.loading ?  <h1 className=\"loader\">Loading...</h1> : \n              <Route path=\"/:repoName/:stateId\" \n                render={ (props) => <BarGraph \n                {...props}\n                cases={this.state.data.cases} \n                active={this.state.data.active} \n                recoveries={this.state.data.recoveries} \n                deaths={this.state.data.deaths} \n              /> }\n            />  \n          }\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n\n//https://0vuczorhbk.execute-api.ap-south-1.amazonaws.com/prod/api TOTAL\n//https://d03c3bgiw4.execute-api.ap-south-1.amazonaws.com/prod/api ACTIVE\n//https://91vcnj2z16.execute-api.ap-south-1.amazonaws.com/prod/api RECOVERED\n//https://8z12wjcl8h.execute-api.ap-south-1.amazonaws.com/prod/api DEATHS","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}